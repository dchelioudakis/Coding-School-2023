@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@page "/itemlist"
@using FuelStationWebClient.DTO.Item;
<h3>Items</h3>

@if (isLoading) {
    <p>Loading ...</p>
} else {
    <BootstrapButton ButtonType="BootstrapButtonType.Success" OnClick="CreateItem">Create</BootstrapButton>

    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Code</th>
                <th>Description</th>
                <th>Type</th>
                <th>Price</th>
                <th>Cost</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in itemList) {
                <tr>
                    <td>@item.Code</td>
                    <td>@item.Description</td>
                    <td>@item.Type</td>
                    <td>@item.Price</td>
                    <td>@item.Cost</td>
                    <td>
                        <BootstrapButton ButtonType="BootstrapButtonType.Warning" OnClick="()=> EditItem(item)">Edit</BootstrapButton>
                        <BootstrapButton ButtonType="BootstrapButtonType.Primary" OnClick="()=> DetailItem(item)">Details</BootstrapButton>
                        <BootstrapButton ButtonType="BootstrapButtonType.Danger" OnClick="()=> DeleteItem(item)">Delete</BootstrapButton>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ItemListDto> itemList = new();
    bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync() {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer() {
        var tempItemList = await httpClient.GetFromJsonAsync<List<ItemListDto>>("Item");
        if (tempItemList is not null) {
            itemList = tempItemList;
        } else {
            //TODO: if tempEmployeeList is null
        }
    }

    private void CreateItem() {
        navigationManager.NavigateTo("itemList/edit");
    }

    private void EditItem(ItemListDto item) {
        navigationManager.NavigateTo($"itemList/edit/{item.Id}");
    }

    private async Task DeleteItem(ItemListDto item) {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Item. Are you sure?");
        if (confirm) {
            var response = await httpClient.DeleteAsync($"item/{item.Id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadItemsFromServer();
            }
            else { 
                var error = await response.Content.ReadAsStringAsync();
                await jsRuntime.InvokeVoidAsync("alert", error);
            }
        }
    }

    private void DetailItem(ItemListDto item) {
        navigationManager.NavigateTo($"itemList/details/{item.Id}");
    }
}

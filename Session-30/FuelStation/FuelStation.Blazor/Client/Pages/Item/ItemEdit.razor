@page "/itemlist/edit/{Id:int?}"
@using FuelStation.Blazor.Shared.DTO.Item;
@using FuelStation.Model.Enums;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime



@if (Id == null) {
    <h3>Create Item</h3>
    <PageTitle>Create Item</PageTitle>
}
else {
    <h3>Edit Item</h3>
    <PageTitle>Edit Item</PageTitle>
}


@if (Item == null) {
    <div class="spinner-border text-secondary" role="status">
        <span class="sr-only">Loading...</span>
    </div>
} else {
    <EditForm Model="Item" OnValidSubmit="OnSave">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row">
            <div class="col-md-2">
                <label class="form-label">Code</label>
                <InputText class="form-control" @bind-Value="@Item.Code" />
            </div>
            <div class="col-md-4">
                <label class="form-label">Description</label>
                <InputText class="form-control" @bind-Value="@Item.Description" />
            </div>
            <div class="col-md-2">
                <label class="form-label">Type</label>
                <InputSelect class="form-control" @bind-Value="@Item.Type">
                    @foreach (var itemtype in Enum.GetValues<ItemType>()) {
                        <option value="@itemtype">@itemtype</option>
                    }
                </InputSelect>
            </div>
            <div class="col-md-2">
                <label class="form-label">Price</label>
                <InputNumber class="form-control" @bind-Value="@Item.Price" />
            </div>
            <div class="col-md-2">
                <label class="form-label">Cost</label>
                <InputNumber class="form-control" @bind-Value="@Item.Cost" />
            </div>
            
            <div class="row mt-2">
                <div class="col">
                    <BootstrapButton ButtonType="BootstrapButtonType.Success" IsSubmit="true">Save</BootstrapButton>
                    <BootstrapButton ButtonType="BootstrapButtonType.Danger" OnClick="OnCancel">Back</BootstrapButton>
                </div>
            </div>
        </div>
    </EditForm>
}


@code {
    [Parameter] public int? Id { get; set; }
    ItemEditDto? Item { get; set; }

    protected override async Task OnInitializedAsync() {
        if (Id == null) {
            Item = new();
        } else {
            Item = await httpClient.GetFromJsonAsync<ItemEditDto>($"item/{Id}");
            if (Item is null) {
                //TODO: If employee is null
            }
        }
    }

    private void OnCancel() {
        navigationManager.NavigateTo("itemlist");
    }

    private async Task OnSave() {
        HttpResponseMessage? response = null;
        if (Id == null) {
            response = await httpClient.PostAsJsonAsync("Item", Item);
        } else {
            response = await httpClient.PutAsJsonAsync("Item", Item);
        }
        if (response.IsSuccessStatusCode) {
            navigationManager.NavigateTo("/itemlist");
        } else {
            var error = await response.Content.ReadAsStringAsync();
            await jsRuntime.InvokeVoidAsync("alert", error);
        }
    }
}

